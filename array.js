/********************************
 * JS数组
 * Author: George Wayne
 ********************************/


/**
 * JS数组的创建方式
 **/

/*************** 1、声明对象变量的方式 ***************/
var arr1 = [];//创建一个数组变量，数组长度为0，没有默认值
var arr2 = [1];//创建一个数组变量，数组长度为1，默认值为1
var arr3 = [2, 3];//创建一个数组变量，数组长度为2，默认值为2，3

/*由此可见创建数组变量的方式性能更好，但是如果想创建一个指定长度或者不知定长度的数组，还是需要用到new Array()的方式来创建一个数组对象*/

/*************** 2、创建数组对象实例的方式new Array() ***************/

var array1 = new Array(); //创建一个数组对象，不指定长度和默认值
var array2 = new Array(3);//创建一个数组对象，指定长度为3
var array3 = new Array(3, 4, 5);//创建一个数组对象，带有默认值3，4，5


/**
 * JS数组的原生方法
 **/

/********* shift() ********/
//删除数组的第一个元素，返回被删除的元素，会改变原数组
var a1 = [1, 2, 3, 4];
a1.shift();//输出 1, a1输出[2, 3, 4]

/********* unshift() ********/
//向数组的第一个元素前插入元素，返回新数组的长度，会改变原数组
var a2 = [1, 2, 3, 4];
a2.unshift(0);//输出5，a2输出[0, 1, 2, 3, 4]
a2.unshift(0, 0);//输出7，a2输出[0, 0, 0, 1, 2, 3, 4]

/********* pop() ********/
//删除数组的最后一个元素，返回被删除的元素，会改变原数组
var a3 = [1, 2, 3, 4];
a3.pop();//输出4，a2输出[1, 2, 3]

/********* push() ********/
//向元素的最后一个元素后面插入元素，返回新数组的长度，会改变原数组
var a3 = [1, 2, 3, 4];
a3.push(0);//输出5，a2输出[1, 2, 3, 4, 0]
a3.push(0, 0);//输出7，a2输出[1, 2, 3, 4, 0, 0, 0]

/********* concat() ********/
//数组拼接，返回拼接后的新数组，不会改变原数组
var aa1 = [1, 2, 3], aa2 = [4, 5, 6];
aa1.concat(aa2);//输出[1, 2, 3, 4, 5, 6]，aa1输出[1, 2, 3], aa2输出[4, 5, 6]

/********* splice(start, count, value1, value2) ********/
//从start开始删除count项，并在该位置插入value1、value2，返回被删除的元素
var a4 = [1, 2, 3, 4, 5];
a4.splice(1, 2, 0, 0);//输出[2, 3], a4输出［1, 0, 0, 4, 5］

/********* reverse() ********/
//反转数组，返回反转后的数组，会改变原数组
var a5 = [1, 2, 3, 4];
a5.reverse();//输出[4, 3, 2, 1], a5输出[4, 3, 2, 1]

/********* sort() ********/
//数组排序,输出排序后的数组，会改变原数组
var a6 = [1, 3, 2, 4];
a6.sort();//输出[4, 3, 2, 1], a5输出[4, 3, 2, 1]

/*实现原理*/
a6.sort(function (a, b) {
    return (a - b);//从小到大排序
    //如果return(b-a)，则表示从大到小排序
});

/********* slice(start, end) ********/
//从start下标开始到end下标结束(不包括end元素)，截取数组元素，返回截取的元素，不会改变原数组
var a7 = [1, 2, 3, 4];
a7.slice(0, 1);//输出[1], a7输出[1, 2, 3, 4]
a7.slice(1, 3);//输出[2，3], a7输出[1, 2, 3, 4]

/********* join() ********/
//用指定内容做连接符，将数组元素拼接成字符串，返回拼接后的字符串，不改变原数组
var a8 = ['a', 'b', 'c', 'd'];
a8.join('+');//输出'a+b+c+d', a8输出['a', 'b', 'c', 'd']

/********* toString() ********/
//将数组原样转换成字符串，输出字符串，不改变原数组
var a8 = ['a', 'b', 'c', 'd'];
a8.toString();//输出"a,b,c,d", a8输出['a', 'b', 'c', 'd']

/********* 示例 ********/
var tmp = [], a = [1, [2, [3, [4, "null"]]]];
function loop(arr) {
    tmp = tmp.length ? [tmp] : ['null'];
    tmp.unshift(arr[0]);
    if (Object.prototype.toString.apply(arr[1]) === '[object Array]') {
        loop(arr[1]);
    }
    return tmp;
}
loop(a);